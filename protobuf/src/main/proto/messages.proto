syntax = "proto3";
// Обязательная строчка. Либо указывается edition, либо syntax: proto2 или proto3

//Сгенерированные классы будут уложены в этот пакет
package formats.protobuf;

// Название класса, в котором будет помойка из внутренних классов сообщений.
// Если не указывать, то будет использоваться название файла.
option java_outer_classname = "Messages";

// Разбивать ли на несколько файлов или все в одну помойку, по умолчанию false.
option java_multiple_files = false;

// На что будет оптимизирован сгенерированный код: SPEED, CODE_SIZE, LITE_RUNTIME.
// Дефолт: SPEED
option optimize_for = SPEED;

/* Длинный комментарий, который превратится в javadoc на класс.
 * Все начинается с ключевого слова `message` */
message SimpleMessage {
  string name = 1; //Комментарий превратится в javadoc к полю
  int32 version = 2;
}

message DataTypesMessage {
  // Для полей рекомендуется snake_case.

  int32 integer32 = 1; // Хорошо энкодит маленькие положительные числа. Для отрицательных значений лучше использовать sint
  uint32 unsigned_int32 = 2; // беззнаковое. Для Java не имеет особого смысла
  sint32 signed_int32 = 3; // со знаком. Лучше энкодит отрицательные числа, чем int32
  fixed32 fixed_int32 = 4; // Всегда занимает 4 байта. Эффективнее, чем int32 хранит огромные значения (> 2^28)
  sfixed32 sfixed_int32 = 5; // Всегда занимает 4 байта

  int64 integer64 = 6;
  uint64 unsigned_int64 = 7;
  sint64 signed_int64 = 8;
  fixed64 fixed_int64 = 9;
  sfixed64 sfixed_int64 = 10;

  float float_field = 11;
  double double_field = 12;

  bool flag = 13;
  bytes raw_bytes_field = 14;
  string str_field = 15;

  Status enum_field = 16;
  NestedMessage nested = 17;

  repeated int32 int_collection = 18; // Повторяющееся значение. Аналог списка
  repeated string str_collection = 19;

  oneof variants {
    string string_variant = 20;
    int32 integer_variant = 21;
    bool bool_variant = 22;
    NestedMessage nested_variant = 23;
  }

  map<string, string> map_field = 24;
//  map<NestedMessage, string> not_possible = 25; // Только строки и числа могут быть ключами в мапе
}

message NestedMessage {
  string name = 1;
}

// Перечисление
enum Status {
  // Название каждого перечисления лучше начинать с одинакового суффикса, чтобы в тех языках, где нет enum'ов
  // с ними было комфортно работать. Если из языков будет только Java, то можно не заморачиваться.
  STATUS_UNKNOWN = 0; // Нулевое всегда должно быть UNKNOWN или UNSPECIFIED. Потому что это дефолтное значение
  STATUS_SUCCESS = 1;
  STATUS_FAIL = 2;
  STATUS_SO_BIG = 128; // Номер точно не влезет в 7 бит
}

/*
 * Ключевое слово optional было в proto2, но его убрали в proto3.
 * Спустя время поняли, что сделали это зря и вернули в v3.15.
 * https://github.com/protocolbuffers/protobuf/blob/main/docs/field_presence.md
 */
message OptionalFieldsMessage {
  optional int32 int_field = 1;
  optional string str_field = 2;
}

message NotOptionalFieldsMessage {
  int32 int_field = 1;
  string str_field = 2;
}